@page "/teams"
@using static tickets.Services.Teams.Queries.GetAllTeams
@inject IServiceManager serviceManager
@inject IMediator mediator
@rendermode InteractiveServer

<PageTitle>Teams</PageTitle>

@if(teams is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Teams</h3>

    <div class="table-responsive rounded">
        <table class="table table-striped table-hover">
            <thead class="bg-dark text-white table-responsive border-top border-start border-end border-dark">
                <tr>
                    <th>Name</th>
                    <th>Total Members</th>
                    <th>Total Tickets</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var team in teams.OrderBy(x => x.Name))
                {
                    var totalTickets = 0;

                    <tr class="table-responsive border-top border-start border-end">
                        <td>
                            <NavLink href="@($"/teams/{team.Id}")" class="text-decoration-none link-dark">
                                @team.Name
                            </NavLink>
                        </td>
                        <td>@team.Members.Count()</td>                        
                        @foreach(var member in team.Members)
                        {
                            totalTickets += member.Tickets.Count();
                        }
                        <td>@totalTickets</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>    
}

@code {
    private ICollection<TeamsResult>? teams;

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(500);

        teams = await mediator.Send(new GetAllTeamsQuery());
    }
}
