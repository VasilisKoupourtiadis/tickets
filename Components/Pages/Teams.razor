@page "/teams"
@using static tickets.Services.Teams.Queries.GetAllTeams
@inject IServiceManager serviceManager
@inject IMediator mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Teams</PageTitle>

@if(teams is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5 mb-5">
        <h1 class="mb-3">Tickets (@teams.Count())</h1>

        <div class="table-responsive rounded">
            <table class="table table-striped table-hover">
                <thead class="text-white table-responsive border-top border-start border-end employees-table-head">
                    <tr>
                        <th>Name</th>
                        <th>Total members</th>
                        <th>Total tickets created</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var team in teams.OrderBy(x => x.Name))
                    {
                        var totalTickets = 0;

                        <tr class="table-responsive border-top border-start border-end employees-table-row" @onclick="@(() => Navigation.NavigateTo($"/teams/{team.Id}"))">
                            <td>@team.Name</td>
                            <td>@team.Members.Count()</td>
                            @foreach(var member in team.Members)
                            {
                                totalTickets += member.Tickets.Count();
                            }
                            <td>@totalTickets</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
}

@code {
    private ICollection<TeamsResult>? teams;

    protected override async Task OnInitializedAsync()
    {
        teams = await mediator.Send(new GetAllTeamsQuery());
    }
}
