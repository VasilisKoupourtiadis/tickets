@page "/teams/{id:guid}"
@using static tickets.Services.Teams.Queries.GetTeam
@using static tickets.Services.Tickets.Queries.GetAllTickets
@inject IServiceManager serviceManager
@inject IMediator mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

@if (team is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5">
        <h1 class="mb-5">Team Details</h1>

        <section class="mb-5">
            <div>
                <span class="fw-bold">Id: </span> @team.Id
            </div>
            <div>
                <span class="fw-bold">Name: </span> @team.Name
            </div>
        </section>

        <h2 class="mb-3">Members (@team.Members.Count())</h2>
        <div class="table-responsive rounded w-50 mb-5">
            <table class="table table-striped table-hover">
                <thead class="text-white table-responsive border-top border-start border-end employees-table-head">
                    <tr>
                        <th>Name</th>
                        <th>Title</th>
                        <th class="text-center">Tickets Created</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in team.Members)
                    {
                        <tr class="table-responsive border-top border-start border-end employees-table-row" @onclick="@(() => Navigation.NavigateTo($"/employees/{member.Id}"))">
                            <td>@member.FullName</td>
                            <td>@member.Title</td>
                            <td class="text-center">@member.Tickets.Count()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h2 class="mb-3">Tickets (@tickets.Count())</h2>
        <div class="table-responsive rounded mb-5 w-50">
            <table class="table table-striped table-hover">
                <thead class="text-white table-responsive border-top border-start border-end employees-table-head">
                    <tr>
                        <th>Status</th>
                        <th>Title</th>
                        <th>Created</th>
                        <th>Created by</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in tickets)
                    {
                        <tr class="table-responsive border-top border-start border-end employees-table-row" @onclick="@(() => Navigation.NavigateTo($"/tickets/{ticket.Id}"))">
                            <td>@ticket.Status</td>
                            <td>@ticket.Title</td>
                            <td>@ticket.Created</td>
                            <td>@ticket.Employee.FullName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private TeamResult? team;

    private ICollection<TicketsResult>? tickets;

    protected override async Task OnInitializedAsync()
    {
        team = await mediator.Send(new GetTeamQuery()
        {
            Id = Id
        });

        tickets = await mediator.Send(new GetAllTicketsQuery()
        {
            Id = team.Id
        });
    }

    private string GetInitals(string name)
    {
        var splitName = name.Split(" ");

        var firstName = splitName[0].Remove(1);
        var lastName = splitName[1].Remove(1);

        return $"{firstName} . {lastName}";
    }    
}
