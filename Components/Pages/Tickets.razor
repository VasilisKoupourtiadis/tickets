@page "/tickets"
@using static tickets.Services.Tickets.Queries.GetAllTickets
@inject IServiceManager serviceManager
@inject IMediator mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>

@if (tickets is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5 mb-5">
        <h1 class="mb-3">Tickets (@tickets.Count())</h1>

        <div class="table-responsive rounded">
            <table class="table table-striped table-hover">
                <thead class="text-white table-responsive border-top border-start border-end employees-table-head">
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Created By</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in tickets)
                    {
                        <tr class="table-responsive border-top border-start border-end employees-table-row" @onclick="@(() => Navigation.NavigateTo($"/tickets/{ticket.Id}"))">
                            <td>@ticket.Title</td>
                            <td>@ticket.Description</td>
                            <td>@ticket.Status</td>
                            <td>@ticket.Created</td>
                            <td>@ticket.Employee.FullName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>    
}

@code {
    private ICollection<TicketsResult>? tickets;

    protected override async Task OnInitializedAsync()
    {
        tickets = await mediator.Send(new GetAllTicketsQuery());
    }
}
