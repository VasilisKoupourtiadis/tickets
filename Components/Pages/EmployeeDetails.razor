@page "/employees/{id:guid}"
@using static tickets.Services.Employees.Queries.GetEmployee
@inject IServiceManager serviceManager
@inject IMediator mediator
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

@if (employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5">
        <h1 class="mb-3">Employee Details</h1>

        <img src="@($"https://fakeimg.pl/200x200/94bbe9/eeaeca?text={GetInitals(employee.FullName)}")" class="rounded-circle mb-3" />

        <div>
            <span class="fw-bold">Name: </span> @employee.FullName
        </div>
        <div>
            <span class="fw-bold">Title: </span> @employee.Title
        </div>
        <div class="mb-4">
            <span class="fw-bold">Belongs to: </span> @employee.TeamName
        </div>       

        <h2 class="mb-4">Tickets (@employee.Tickets.Count())</h2>

        <section class="row row-cols-5 gap-5">
            @foreach (var ticket in employee.Tickets)
            {
                <div class="card text-white rounded g-0">
                    <div class="card-header fw-bold border-bottom-0 pb-0 fs-5">
                        <NavLink href="@($"/tickets/{ticket.Id}")" class="text-decoration-none text-white">
                            @ticket.Title.ToUpper()
                        </NavLink>
                    </div>
                    <div class="card-body rounded-bottom">
                        <div class="mb-3">
                            <span class="fw-bold">Description: </span> @ticket.Description
                        </div>
                        <div class="mb-3">
                            <span class="fw-bold">Status: </span> @ticket.Status
                        </div>
                        <div class="mb-3">
                            <span class="fw-bold">Created: </span> @ticket.Created
                        </div>
                        <div>
                            <span class="fw-bold">Created by: </span> @employee.FullName
                        </div>
                    </div>                    
                </div>               
            }
        </section>        
    </section>    
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private EmployeeResult? employee;

    protected override async Task OnInitializedAsync()
    {
        employee = await mediator.Send(new GetEmployeeQuery()
        {
            Id = Id
        });
    }

    private string GetInitals(string name)
    {
        var splitName = name.Split(" ");

        var firstName = splitName[0].Remove(1);
        var lastName = splitName[1].Remove(1);

        return $"{firstName} . {lastName}";
    }
}
