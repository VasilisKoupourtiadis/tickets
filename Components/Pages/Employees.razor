@page "/employees"
@using static tickets.Services.Employees.Queries.GetAllEmployees
@inject IServiceManager serviceManager
@inject IMediator mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Employees</PageTitle>

@if (employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5">
        <h1 class="mb-3">Employees (@employees.Count())</h1>

        <div class="table-responsive rounded">
            <table class="table table-striped table-hover">
                <thead class="text-white table-responsive border-top border-start border-end employees-table-head">
                    <tr>
                        <th>Name</th>
                        <th>Title</th>
                        <th>Team</th>
                        <th>Tickets Created</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in employees.OrderBy(x => x.TeamName))
                    {
                        <tr class="table-responsive border-top border-start border-end employees-table-row" @onclick="@(() => Navigation.NavigateTo($"/employees/{employee.Id}"))">
                            <td>@employee.FullName</td>
                            <td>@employee.Title</td>
                            <td>@employee.TeamName</td>
                            <td>@employee.Tickets.Count()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>    
}

@code {
    private ICollection<EmployeesResult>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await mediator.Send(new GetAllEmployeesQuery());
    }
}
