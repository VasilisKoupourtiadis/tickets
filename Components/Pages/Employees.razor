@page "/employees"
@using static tickets.Services.Employees.Queries.GetAllEmployees
@inject IServiceManager serviceManager
@inject IMediator mediator
@rendermode InteractiveServer

<PageTitle>Employees</PageTitle>

@if (employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Employees</h3>

    <div class="table-responsive rounded">
        <table class="table table-striped table-hover">
            <thead class="bg-dark text-white table-responsive border-top border-start border-end border-dark">
                <tr>
                    <th>Id</th>
                    <th>Created By</th>
                    <th>TeamId</th>
                    <th>Tickets Created</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {                    
                    <tr class="table-responsive border-top border-start border-end">
                        <td>@employee.Id</td>
                        <td>@employee.FullName, @employee.Title</td>
                        <td>@employee.TeamId</td>
                        <td>
                            <NavLink href="@($"employees/{employee.Id}")" class="text-decoration-none link-dark">
                                @employee.Tickets.Count()
                            </NavLink>                            
                        </td>                                              
                    </tr>
                }
            </tbody>
        </table>
    </div>    
}

@code {
    private ICollection<EmployeesResult>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await mediator.Send(new GetAllEmployeesQuery());
    }
}
