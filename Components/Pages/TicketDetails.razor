@page "/tickets/{id:guid}"
@using static tickets.Services.Tickets.Queries.GetTicket
@using static tickets.Services.Tickets.Queries.GetAllTickets
@using static tickets.Services.Tickets.Commands.UpdateTicketStatus
@inject IServiceManager serviceManager
@inject IMediator mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

@if (ticket is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="px-5">
        <h1 class="mb-5">Ticket Details</h1>

        <section class="mb-5">
            <div class="mb-2">
                <span class="fw-bold">Id: </span> @ticket.Id
            </div>
            <div class="mb-2">
                <span class="fw-bold">Title: </span> @ticket.Title
            </div>
            <div class="mb-2">
                <span class="fw-bold">Description: </span> @ticket.Description
            </div>
            <div class="mb-2">
                <span class="fw-bold">Status: </span> @ticket.Status
            </div>
            <div class="mb-2">
                <span class="fw-bold">Created: </span> @ticket.Created
            </div>
            <div class="mb-2">
                <span class="fw-bold">Created By: </span>
                <NavLink href="@($"/employees/{ticket.Employee.Id}")" class="text-decoration-none employee-detail-link">
                    @ticket.Employee.FullName
                </NavLink>                
            </div>
            @if (ticket.Status.ToLower() != "closed")
            {
                <div class="mb-5">
                    <button class="btn update-ticket-button" @onclick="() => UpdateStatus(ticket.Id, ticket.Status)">
                        Update Status
                    </button>
                </div>
            }            
        </section>
        
        <h2 class="mb-3">Recently added tickets</h2>
        <section class="d-flex justify-content-center row row-cols-6 gap-5 mx-0">
            @foreach (var ticket in tickets)
            {
                <div class="card text-white rounded g-0">
                    <div class="card-header fw-bold border-bottom-0 pb-0 fs-5">
                        <NavLink href="@($"/tickets/{ticket.Id}")" class="text-decoration-none text-white">
                            @ticket.Title.ToUpper()
                        </NavLink>
                    </div>
                    <div class="d-flex flex-column justify-content-between card-body rounded-bottom">
                        <div class="d-flex flex-column justify-content-evenly">
                            <div class="mb-3">
                                <span class="fw-bold">Description: </span> @ticket.Description
                            </div>
                            <div class="mb-3">
                                <span class="fw-bold">Status: </span> @ticket.Status
                            </div>
                            <div class="mb-3">
                                <span class="fw-bold">Created: </span> @ticket.Created
                            </div>
                            <div class="mb-3">
                                <span class="fw-bold">Created by: </span> @ticket.Employee.FullName
                            </div>
                        </div>                                                
                    </div>
                </div>
            }
        </section>
    </section>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Services.Tickets.Queries.GetTicket.TicketResult? ticket;

    private ICollection<TicketsResult>? tickets;

    protected override async Task OnInitializedAsync()
    {
        ticket = await mediator.Send(new GetTicketQuery()
        {
            Id = Id
        });

        tickets = await mediator.Send(new GetAllTicketsQuery()
        {
            Amount = 5
        });
    }

    private async void UpdateStatus(Guid id, string status)
    {
        var result = await mediator.Send(new UpdateTicketStatusCommand()
        {
            Id = id,
            Status = status
        });

        ticket = result;

        StateHasChanged();
    }    
}
